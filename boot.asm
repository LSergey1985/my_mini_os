; boot.asm
bits 16
org 0x7C00

start:
    jmp main

;-------------------------------------------------------
; Загрузка ядра с диска
; Использует прерывание BIOS 0x13 (чтение секторов)
;-------------------------------------------------------
load_kernel:
    mov ax, 0x1000       ; ES:BX = 0x1000:0x0000 (куда грузим)
    mov es, ax
    xor bx, bx

    mov ah, 0x02         ; Функция чтения секторов
    mov al, 10           ; Читать 10 секторов (размер ядра ~5KB)
    mov ch, 0            ; Цилиндр 0
    mov cl, 2            ; Сектор 2 (после загрузчика)
    mov dh, 0            ; Головка 0
    mov dl, 0            ; Диск 0 (флоппи)

    int 0x13             ; Вызов BIOS
    jc disk_error        ; Если ошибка (флаг Carry установлен)
    ret

disk_error:
    mov si, error_msg    ; Вывод сообщения об ошибке
    call print_real_mode
    hlt

;-------------------------------------------------------
; Вывод строки в реальном режиме
; Вход: SI = адрес строки
;-------------------------------------------------------
print_real_mode:
    mov ah, 0x0E
.loop:
    lodsb
    or al, al
    jz .done
    int 0x10
    jmp .loop
.done:
    ret

;-------------------------------------------------------
; Данные
;-------------------------------------------------------
error_msg db "Disk error!", 0

;-------------------------------------------------------
; Основная часть загрузчика
;-------------------------------------------------------
main:
    cli
    xor ax, ax
    mov ds, ax
    mov es, ax
    mov ss, ax
    mov sp, 0x7C00

    ; Загрузка ядра
    call load_kernel

    ; Переход в защищённый режим
    lgdt [gdt_desc]
    mov eax, cr0
    or eax, 1
    mov cr0, eax
    jmp 0x08:pm_start

;-------------------------------------------------------
; Защищённый режим (32-битный код)
;-------------------------------------------------------
bits 32
pm_start:
    mov ax, 0x10        ; Селектор данных
    mov ds, ax
    mov ss, ax
    mov esp, 0x90000    ; Указатель стека

    ; Переход к ядру
    jmp 0x10000         ; Адрес загрузки ядра

;-------------------------------------------------------
; GDT (Global Descriptor Table)
;-------------------------------------------------------
gdt:
    ; Нулевой дескриптор
    dq 0

    ; Селектор 0x08: код
    dw 0xFFFF           ; Limit (0-15)
    dw 0x0000           ; Base (0-15)
    db 0x00             ; Base (16-23)
    db 0x9A             ; P=1, DPL=0, Code, Exec/Read
    db 0xCF             ; G=1, D=1, Limit (16-19)=0xF
    db 0x00             ; Base (24-31)

    ; Селектор 0x10: данные
    dw 0xFFFF
    dw 0x0000
    db 0x00
    db 0x92             ; P=1, DPL=0, Data, Read/Write
    db 0xCF
    db 0x00
gdt_end:

gdt_desc:
    dw gdt_end - gdt - 1
    dd gdt

times 510-($-$$) db 0
dw 0xAA55

; Добавьте этот код в конец файла boot.asm (в 32-битную секцию)
;-------------------------------------------------------
; Загрузка IDT (реализация для extern void load_idt())
;-------------------------------------------------------
global load_idt
load_idt:
    mov eax, [esp + 4]  ; Получить указатель на структуру idt_ptr
    lidt [eax]          ; Загрузить IDTR
    ret
